3 Add auto updating (1d)
4 Add a LOG class and custom errors, maybe even use external lib (<1d)
 - keep a sort of a log file, there you can remember the states the program has been in use it for remote debugging
 - you dont need to modify the code exceptions too much since you will be deleting it all soon, just upgrade the ones you have already and thats it
 - later we could implement std::format into logging so that we can pass n arguments in log.xxx() and it will insert var values into string
 - probably add optional argument to surpress log output to console, just to write message in log
5-6 replace sfml with opengl (1mo)
...
 - Ephemeris and Picture class really could have some inheritance (make a sky-position class)
 - Manage classes a bit nicer so that you can have more objects
 - One ephemeris should store its variant orbits by itself (creating a subclass for VO)
 - Create a sphere on which the dots and all other things will be rendered (it should be a sphere, that makes everything easier)
 - Picture areas gotta be tilted like the telescope is
 - Account for movement of object trough time (when taking pictures)
     - Linear approximations can be useful here, as someone could get a preview of how the object acts and then have the data downloaded when they set a time
 - Show the coordinate system and all of that
 - Show where the ground is, and the sides of the world too
 - Add an object selection menu, there you should be able to select objects to show (do it as a sidebar)
 - Add the ability to view stars
...
5-6 Better object data management (7d)
...
 - Storage system (database maybe?)
 - Download data using the korisno.txt tips (meaning, ask MPC about its meaning)
 - Download data asynchrously and display it right away (or do threading)
 - Background downloads for data
...
7 Add a prompt to copy data to the clipboard (<1d)
8 Add the telescope code (and make it save the coordinates from the telescope database on mpc if there are none) (<1d)
 - You could do it by code automatically checking for the data and prompting you to insert the code or you could make cmake insert that data and the program get it from mpc
9 Add program testing (3d)
10 Try to make an algorithm for automatically selecting squares in an optimal manner (2d)
 - linear regression is possible in most cases (detection algorithm needed), in others its NP (heuristic?)
11 Account for atmospheric refraction and potential camera distortions (?)
12 use Reuse SPDX SBOM (2d)
13 Add CI/CD (2d)

At any point:
Make it so that the user can configure the setup without opening the ini file
 - The program prompts them for an observatory code and pulls some data from the internet
 - or even better, pulls all of the data and offers the observatories that exist for choosing
 - The same prompting for telescopes 

Version 4 maybe?
Separate the program into multiple programs
 - a program for GUI only
 - a program for background downloading

DONE!
1 remove curl
2 Replace submodules with fetchcontent